WEBSOCKET SECURITY ERROR ANALYSIS
================================

PROBLEM DESCRIPTION:
-------------------
When accessing https://development.letmypeoplegrow.com.au, users get the following error:

"Failed to construct 'WebSocket': An insecure WebSocket connection may not be initiated from a page loaded over HTTPS."

This error occurs whether the user is logged in or not, and prevents the React development server's hot reload functionality from working.

ERROR DETAILS:
--------------
SecurityError: Failed to construct 'WebSocket': An insecure WebSocket connection may not be initiated from a page loaded over HTTPS.
    at new WebSocketClient (https://development.letmypeoplegrow.com.au/static/js/bundle.js:41356:19)
    at initSocket (https://development.letmypeoplegrow.com.au/static/js/bundle.js:43337:12)
    at ./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=development.letmypeoplegrow.com.au&port=443&pathname=%2Fws&logging=none&overlay=%7B%22errors%22%3Atrue%2C%22warnings%22%3Afalse%7D&reconnect=10&hot=true&live-reload=true

INFRASTRUCTURE SETUP:
--------------------
1. Nginx Proxy Manager (NPM) handles HTTPS termination and reverse proxy
2. Docker containers running the application stack
3. Internal nginx proxy on port 3004
4. React development server on port 3003
5. Node.js backend server on port 3001

CURRENT CONFIGURATION FILES:
---------------------------

1. CLIENT ENVIRONMENT (.env):
```
WDS_SOCKET_HOST=development.letmypeoplegrow.com.au
WDS_SOCKET_PORT=3004
WDS_SOCKET_PATH=/ws
WDS_SOCKET_PROTOCOL=ws
```

2. DOCKER COMPOSE (docker-compose.dev.yml):
```
version: '3.8'

services:
  # MariaDB Database
  db:
    image: mariadb:10.6
    container_name: church_attendance_db_dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: church_attendance
      MYSQL_USER: church_user
      MYSQL_PASSWORD: church_password
    ports:
      - "3307:3306"
    volumes:
      - db_data_dev:/var/lib/mysql
      - ./server/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - app-network-dev
    healthcheck:
      test: ["CMD", "mariadb", "-u", "church_user", "-pchurch_password", "-e", "SELECT 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node.js Backend Server (Development)
  server:
    build:
      context: .
      dockerfile: Dockerfile.server.dev
    container_name: church_attendance_server_dev
    restart: unless-stopped
    env_file:
      - ./server/.env
    environment:
      NODE_ENV: development
      PORT: 3001
      CLIENT_URL: http://localhost:3003
      DB_HOST: db
      DB_PORT: 3306
      DB_NAME: church_attendance
      DB_USER: church_user
      DB_PASSWORD: church_password
      JWT_SECRET: your_secure_jwt_secret_change_this_in_production
      JWT_EXPIRE: 30d
      OTC_EXPIRE_MINUTES: 10
      OTC_RESEND_COOLDOWN_SECONDS: 60
      EMAIL_FROM: hello@letmypeoplegrow.com.au
    volumes:
      - ./server:/app
      - /app/node_modules
      - ./server/uploads:/app/uploads
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network-dev
    command: npm run dev

  # React Frontend Client (Development)
  client:
    build:
      context: .
      dockerfile: Dockerfile.client.dev
    container_name: church_attendance_client_dev
    restart: unless-stopped
    ports:
      - "3003:3003"
    volumes:
      - ./client:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - PORT=3003
      - FAST_REFRESH=false
      - WDS_SOCKET_HOST=development.letmypeoplegrow.com.au
      - WDS_SOCKET_PORT=3004
      - WDS_SOCKET_PATH=/ws
      - WDS_SOCKET_PROTOCOL=ws
    depends_on:
      - server
    networks:
      - app-network-dev
    command: npm start

  # Nginx Reverse Proxy for Development
  nginx:
    image: nginx:alpine
    container_name: church_attendance_nginx_dev
    restart: unless-stopped
    ports:
      - "3004:80"
    volumes:
      - ./nginx-dev.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - client
      - server
    networks:
      - app-network-dev

volumes:
  db_data_dev:

networks:
  app-network-dev:
    driver: bridge
```

3. NGINX CONFIGURATION (nginx-dev.conf):
```
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Upstream definitions
    upstream client {
        server client:3003;
    }

    upstream server {
        server server:3001;
    }

    # Map for WebSocket upgrade
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'; connect-src 'self' http: https: ws: wss: data: blob:; script-src 'self' 'unsafe-eval' 'unsafe-inline' http: https:; style-src 'self' 'unsafe-inline' http: https:; img-src 'self' http: https: data: blob:; font-src 'self' http: https: data:;" always;

        # API routes - forward to Node.js server
        location /api/ {
            proxy_pass http://server;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeout settings
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Health check endpoint
        location /health {
            proxy_pass http://server;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebSocket endpoint for React dev server
        location /ws {
            proxy_pass http://client;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # WebSocket specific settings
            proxy_set_header Sec-WebSocket-Extensions $http_sec_websocket_extensions;
            proxy_set_header Sec-WebSocket-Key $http_sec_websocket_key;
            proxy_set_header Sec-WebSocket-Version $http_sec_websocket_version;
            
            # Timeout settings for WebSocket
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }

        # Everything else - forward to React client
        location / {
            proxy_pass http://client;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # WebSocket support for React dev server
            proxy_set_header Sec-WebSocket-Extensions $http_sec_websocket_extensions;
            proxy_set_header Sec-WebSocket-Key $http_sec_websocket_key;
            proxy_set_header Sec-WebSocket-Version $http_sec_websocket_version;
        }
    }
}
```

4. CLIENT PACKAGE.JSON:
```
{
  "name": "let-my-people-grow-client",
  "version": "0.9.0",
  "private": true,
  "dependencies": {
    "@headlessui/react": "^2.2.5",
    "@heroicons/react": "^2.2.0",
    "@hookform/resolvers": "^5.1.1",
    "@tailwindcss/forms": "^0.5.10",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.126",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "autoprefixer": "^10.4.21",
    "axios": "^1.11.0",
    "date-fns": "^4.1.0",
    "libphonenumber-js": "^1.12.10",
    "moment": "^2.30.1",
    "postcss": "^8.5.6",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-hook-form": "^7.60.0",
    "react-router-dom": "^7.7.0",
    "react-scripts": "5.0.1",
    "tailwindcss": "^3.4.17",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4",
    "yup": "^1.6.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
```

CURRENT NETWORK FLOW:
--------------------
1. Client browser → https://development.letmypeoplegrow.com.au (NPM)
2. NPM → Internal nginx on port 3004 (HTTP)
3. Internal nginx → React dev server on port 3003 (HTTP)
4. WebSocket connection: ws://development.letmypeoplegrow.com.au:3004/ws

ATTEMPTS MADE TO FIX:
--------------------
1. Changed WDS_SOCKET_PROTOCOL from 'wss' to 'ws'
2. Removed cache-busting middleware from server
3. Updated nginx configuration with proper WebSocket headers
4. Restarted all containers

ISSUE ANALYSIS:
--------------
The problem appears to be that the React development server is trying to establish a WebSocket connection using the 'ws' protocol, but the browser is accessing the site over HTTPS. Even though we're using 'ws' internally, the browser still sees this as an insecure connection attempt from a secure context.

The error message shows the WebSocket is trying to connect to port 443 (HTTPS default) but with 'ws' protocol, which browsers block for security reasons.

POTENTIAL SOLUTIONS TO INVESTIGATE:
----------------------------------
1. Configure NPM to properly handle WebSocket upgrades from ws:// to wss://
2. Use a different port for WebSocket connections that bypasses the HTTPS requirement
3. Configure the React dev server to use a different WebSocket configuration
4. Set up a separate WebSocket proxy that handles the protocol upgrade
5. Use a different development setup that doesn't require WebSocket connections

QUESTIONS FOR AI ANALYSIS:
-------------------------
1. How should the WebSocket protocol be configured when using an external reverse proxy (NPM) with HTTPS termination?
2. What is the correct way to handle WebSocket upgrades in this multi-proxy setup?
3. Are there alternative approaches to enable hot reload in this environment?
4. Should the WebSocket connection bypass the internal nginx proxy entirely?
5. What configuration changes are needed in NPM to properly handle WebSocket upgrades? 