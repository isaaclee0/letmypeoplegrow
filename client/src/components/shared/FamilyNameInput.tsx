import React, { useState, useEffect } from 'react';
import { generateFamilyName, PersonForFamilyName } from '../../utils/familyNameUtils';
import { validateFamilyName } from '../../utils/validationUtils';

interface FamilyNameInputProps {
  value: string;
  onChange: (value: string) => void;
  people?: PersonForFamilyName[];
  autoGenerate?: boolean;
  className?: string;
  placeholder?: string;
  required?: boolean;
  disabled?: boolean;
  label?: string;
  helpText?: string;
}

const FamilyNameInput: React.FC<FamilyNameInputProps> = ({
  value,
  onChange,
  people = [],
  autoGenerate = true,
  className = '',
  placeholder = 'Enter family name',
  required = false,
  disabled = false,
  label = 'Family Name',
  helpText
}) => {
  const [isAutoGenerated, setIsAutoGenerated] = useState(true);
  const [manuallyEdited, setManuallyEdited] = useState(false);
  
  const validation = validateFamilyName(value);
  
  // Auto-generate family name when people change
  useEffect(() => {
    if (autoGenerate && !manuallyEdited && people.length > 0) {
      const generated = generateFamilyName(people);
      if (generated && generated !== value) {
        onChange(generated);
        setIsAutoGenerated(true);
      }
    }
  }, [people, autoGenerate, manuallyEdited, value, onChange]);
  
  const handleChange = (newValue: string) => {
    onChange(newValue);
    setManuallyEdited(true);
    setIsAutoGenerated(false);
  };
  
  const handleRegenerateClick = () => {
    if (people.length > 0) {
      const generated = generateFamilyName(people);
      onChange(generated);
      setIsAutoGenerated(true);
      setManuallyEdited(false);
    }
  };
  
  const canRegenerate = autoGenerate && people.length > 0 && (manuallyEdited || !isAutoGenerated);
  
  return (
    <div className={className}>
      <div className="flex items-center justify-between">
        <label className="block text-sm font-medium text-gray-700">
          {label}
          {required && <span className="text-red-500 ml-1">*</span>}
        </label>
        {canRegenerate && (
          <button
            type="button"
            onClick={handleRegenerateClick}
            className="text-sm text-primary-600 hover:text-primary-700 font-medium"
          >
            Auto-generate
          </button>
        )}
      </div>
      
      <div className="mt-1 relative">
        <input
          type="text"
          value={value}
          onChange={(e) => handleChange(e.target.value)}
          className={`block w-full border rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 ${
            !validation.isValid ? 'border-red-300' : 'border-gray-300'
          }`}
          placeholder={placeholder}
          required={required}
          disabled={disabled}
          maxLength={100}
        />
        
        {isAutoGenerated && autoGenerate && !manuallyEdited && (
          <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
            <span className="text-xs text-green-600 bg-green-50 px-2 py-1 rounded">
              Auto
            </span>
          </div>
        )}
      </div>
      
      {!validation.isValid && validation.errors.length > 0 && (
        <p className="mt-1 text-sm text-red-600">{validation.errors[0]}</p>
      )}
      
      {helpText && validation.isValid && (
        <p className="mt-1 text-sm text-gray-500">{helpText}</p>
      )}
      
      {autoGenerate && isAutoGenerated && !manuallyEdited && (
        <p className="mt-1 text-xs text-gray-500">
          Family name automatically generated from member names
        </p>
      )}
    </div>
  );
};

export default FamilyNameInput;
